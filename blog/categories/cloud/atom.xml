<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cloud | Rafael's Blog]]></title>
  <link href="http://daudt.github.io/blog/categories/cloud/atom.xml" rel="self"/>
  <link href="http://daudt.github.io/"/>
  <updated>2015-12-20T16:04:06-07:00</updated>
  <id>http://daudt.github.io/</id>
  <author>
    <name><![CDATA[Rafael Daudt]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Selenium in the Cloud With Sauce Labs]]></title>
    <link href="http://daudt.github.io/blog/2014/11/20/selenium-in-the-cloud-with-sauce-labs/"/>
    <updated>2014-11-20T17:37:00-07:00</updated>
    <id>http://daudt.github.io/blog/2014/11/20/selenium-in-the-cloud-with-sauce-labs</id>
    <content type="html"><![CDATA[<p>Selenium is an awesome tool to run functional tests for web applications. One of the issues when creating browser tests is that some projects require a vast matrix of browsers/OS combinations and this means having a big infrastructure to support. That also means you have to maintain all the VMs by installing security patches and other required software updates.
Sauce Labs provides over 400 browser/OS combinations in the cloud. All you have to do is specify which browser and OS version you want. The tests run the same way they would on a remote selenium server, except you have a wide variety of browsers and OSes to run your test against.
If the tests fails or you just want to see what happened during the run, all you need to do is login to your Sauce Labs account and look at either the results log file or the video (yes, there is even a video!).
Sauce Labs offers both free and paid plans. The paid plans basically work like a cell phone plan: you buy a certain number of minutes and use up those minutes to run your tests. All paid plans offer some level of concurrency, which can come in handy when you have a lot of browser tests to run. For instance, if you have 10 tests that take 1 minute each to run, you can execute the entire test suite in a minute by running 10 concurrent tests.
Just like regular Selenium tests, you can code your tests in any of the supported <a href="http://docs.seleniumhq.org/about/platforms.jsp#programming-languages">languages</a>. Their documentation and their customer service are awesome and you can find lots of examples of how to run your tests in the cloud.
Let&rsquo;s say you are testing the Wikipedia website and want to create a simple test to verify some content on a page. In Ruby, you would define a before block in your Rspec tests that launches a new browser window, using Sauce Labs as the remote server:
<code>ruby
before :each do
    # launch the stuff
    caps = Selenium::WebDriver::Remote::Capabilities.firefox
    caps.platform = 'Linux'
    caps.version = '26'
    @driver = Selenium::WebDriver.for(
        :remote,
        :url =&gt;  "http://#{SAUCE_USERNAME}:#{SAUCE_KEY}@ondemand.saucelabs.com:80/wd/hub",
        :desired_capabilities =&gt; caps)   
    @driver.navigate.to 'http://www.wikipedia.org'
  end
</code>
Make sure you define the constants for your username and API key (you can get those from your account page on saucelabs.com).
After that, you are ready to write your first test:
<code>ruby
  it 'should find results for selenium' do
    homepage = WikipediaHome.new(@driver)
    homepage.search_for_something 'selenium'
    expect(homepage.text.include?('atomic number')).to eq(true)
  end
</code>
One important thing to keep in mind is that since ruby program is running on your local machine (sending commands to the remote webdriver in the cloud),
you need to call Sauce Lab&rsquo;s API after each test is done and update the test name and the result:
<code>ruby
  after :each do |example|
    @driver.quit
    #update the sauce config settings after each test
    RestClient.put "https://#{SAUCE_USERNAME}:#{SAUCE_KEY}@saucelabs.com/rest/v1/#{SAUCE_USERNAME}/jobs/#{@driver.session_id}",
                   { name: example.full_description, passed: !example.exception }.to_json, :content_type =&gt; :json, :accept =&gt; :json
  end
</code>
Modify the caps object on the before block to specify what browser and OS you want.</p>

<h3>Conclusion</h3>

<p>If you have a large number of automated web tests you need to run, but don&rsquo;t feel like spending a lot of time setting up a Selenium client infrastructure, checkout Sauce Labs to execute your tests in the cloud.<br/>
<img src="/images/saucelabs.jpg"></p>
]]></content>
  </entry>
  
</feed>
